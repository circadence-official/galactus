package v1

import (
	context "context"
	fmt "fmt"
	errors "github.com/circadence-official/protoc-gen-gorm/errors"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type TodoORM struct {
	Description   string     `gorm:"type:uuid"`
	Id            string     `gorm:"type:uuid;primary_key"`
	ScheduledTime *time.Time `gorm:"type:timestamp"`
	Status        int32      `gorm:"type:enum?;not null"`
	Title         string     `gorm:"type:uuid;not null"`
}

// TableName overrides the default tablename generated by GORM
func (TodoORM) TableName() string {
	return "todos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Todo) ToORM(ctx context.Context) (TodoORM, error) {
	to := TodoORM{}
	var err error
	if prehook, ok := interface{}(m).(TodoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	to.Status = int32(m.Status)
	if m.ScheduledTime != nil {
		t := m.ScheduledTime.AsTime()
		to.ScheduledTime = &t
	}
	if posthook, ok := interface{}(m).(TodoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TodoORM) ToPB(ctx context.Context) (Todo, error) {
	to := Todo{}
	var err error
	if prehook, ok := interface{}(m).(TodoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	to.Status = TodoStatus(m.Status)
	if m.ScheduledTime != nil {
		to.ScheduledTime = timestamppb.New(*m.ScheduledTime)
	}
	if posthook, ok := interface{}(m).(TodoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Todo the arg will be the target, the caller the one being converted from

// TodoBeforeToORM called before default ToORM code
type TodoWithBeforeToORM interface {
	BeforeToORM(context.Context, *TodoORM) error
}

// TodoAfterToORM called after default ToORM code
type TodoWithAfterToORM interface {
	AfterToORM(context.Context, *TodoORM) error
}

// TodoBeforeToPB called before default ToPB code
type TodoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Todo) error
}

// TodoAfterToPB called after default ToPB code
type TodoWithAfterToPB interface {
	AfterToPB(context.Context, *Todo) error
}

// DefaultCreateTodo executes a basic gorm create call
func DefaultCreateTodo(ctx context.Context, in *Todo, db *gorm.DB) (*Todo, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TodoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTodo(ctx context.Context, in *Todo, db *gorm.DB) (*Todo, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TodoORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TodoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TodoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TodoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTodo(ctx context.Context, in *Todo, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TodoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TodoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTodoSet(ctx context.Context, in []*Todo, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TodoORM{})).(TodoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TodoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TodoORM{})).(TodoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TodoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Todo, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Todo, *gorm.DB) error
}

// DefaultStrictUpdateTodo clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTodo(ctx context.Context, in *Todo, db *gorm.DB) (*Todo, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTodo")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TodoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TodoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTodo executes a basic gorm update call with patch behavior
func DefaultPatchTodo(ctx context.Context, in *Todo, updateMask *field_mask.FieldMask, db *gorm.DB) (*Todo, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Todo
	var err error
	if hook, ok := interface{}(&pbObj).(TodoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTodo(ctx, &Todo{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TodoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTodo(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TodoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTodo(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TodoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TodoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Todo, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TodoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Todo, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TodoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Todo, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TodoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Todo, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTodo executes a bulk gorm update call with patch behavior
func DefaultPatchSetTodo(ctx context.Context, objects []*Todo, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Todo, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Todo, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTodo(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTodo patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTodo(ctx context.Context, patchee *Todo, patcher *Todo, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Todo, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedScheduledTime bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if !updatedScheduledTime && strings.HasPrefix(f, prefix+"ScheduledTime.") {
			if patcher.ScheduledTime == nil {
				patchee.ScheduledTime = nil
				continue
			}
			if patchee.ScheduledTime == nil {
				patchee.ScheduledTime = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ScheduledTime."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ScheduledTime, patchee.ScheduledTime, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ScheduledTime" {
			updatedScheduledTime = true
			patchee.ScheduledTime = patcher.ScheduledTime
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTodo executes a gorm list call
func DefaultListTodo(ctx context.Context, db *gorm.DB) ([]*Todo, error) {
	in := Todo{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TodoORM{}, &Todo{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TodoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TodoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Todo{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TodoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TodoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TodoORM) error
}
