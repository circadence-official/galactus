package v1

import (
	context "context"
	fmt "fmt"
	errors "github.com/circadence-official/protoc-gen-gorm/errors"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type RegistrationORM struct {
	Address     string
	Consumers   []*ConsumerORM `gorm:"foreignkey:RegistrationId;association_foreignkey:Id"`
	Description string
	Id          string `gorm:"type:uuid;primary_key"`
	Name        string
	Producers   []*ProducerORM `gorm:"foreignkey:RegistrationId;association_foreignkey:Id"`
	Protocols   []*ProtocolORM `gorm:"foreignkey:RegistrationId;association_foreignkey:Id"`
	Status      int32
	Version     string
}

// TableName overrides the default tablename generated by GORM
func (RegistrationORM) TableName() string {
	return "registrations"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Registration) ToORM(ctx context.Context) (RegistrationORM, error) {
	to := RegistrationORM{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Version = m.Version
	to.Description = m.Description
	to.Address = m.Address
	to.Status = int32(m.Status)
	for _, v := range m.Protocols {
		if v != nil {
			if tempProtocols, cErr := v.ToORM(ctx); cErr == nil {
				to.Protocols = append(to.Protocols, &tempProtocols)
			} else {
				return to, cErr
			}
		} else {
			to.Protocols = append(to.Protocols, nil)
		}
	}
	for _, v := range m.Producers {
		if v != nil {
			if tempProducers, cErr := v.ToORM(ctx); cErr == nil {
				to.Producers = append(to.Producers, &tempProducers)
			} else {
				return to, cErr
			}
		} else {
			to.Producers = append(to.Producers, nil)
		}
	}
	for _, v := range m.Consumers {
		if v != nil {
			if tempConsumers, cErr := v.ToORM(ctx); cErr == nil {
				to.Consumers = append(to.Consumers, &tempConsumers)
			} else {
				return to, cErr
			}
		} else {
			to.Consumers = append(to.Consumers, nil)
		}
	}
	if posthook, ok := interface{}(m).(RegistrationWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RegistrationORM) ToPB(ctx context.Context) (Registration, error) {
	to := Registration{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Version = m.Version
	to.Description = m.Description
	to.Address = m.Address
	to.Status = ServiceStatus(m.Status)
	for _, v := range m.Protocols {
		if v != nil {
			if tempProtocols, cErr := v.ToPB(ctx); cErr == nil {
				to.Protocols = append(to.Protocols, &tempProtocols)
			} else {
				return to, cErr
			}
		} else {
			to.Protocols = append(to.Protocols, nil)
		}
	}
	for _, v := range m.Producers {
		if v != nil {
			if tempProducers, cErr := v.ToPB(ctx); cErr == nil {
				to.Producers = append(to.Producers, &tempProducers)
			} else {
				return to, cErr
			}
		} else {
			to.Producers = append(to.Producers, nil)
		}
	}
	for _, v := range m.Consumers {
		if v != nil {
			if tempConsumers, cErr := v.ToPB(ctx); cErr == nil {
				to.Consumers = append(to.Consumers, &tempConsumers)
			} else {
				return to, cErr
			}
		} else {
			to.Consumers = append(to.Consumers, nil)
		}
	}
	if posthook, ok := interface{}(m).(RegistrationWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Registration the arg will be the target, the caller the one being converted from

// RegistrationBeforeToORM called before default ToORM code
type RegistrationWithBeforeToORM interface {
	BeforeToORM(context.Context, *RegistrationORM) error
}

// RegistrationAfterToORM called after default ToORM code
type RegistrationWithAfterToORM interface {
	AfterToORM(context.Context, *RegistrationORM) error
}

// RegistrationBeforeToPB called before default ToPB code
type RegistrationWithBeforeToPB interface {
	BeforeToPB(context.Context, *Registration) error
}

// RegistrationAfterToPB called after default ToPB code
type RegistrationWithAfterToPB interface {
	AfterToPB(context.Context, *Registration) error
}

type ProtocolORM struct {
	Id             string `gorm:"type:uuid;primary_key"`
	Kind           int32
	Port           int32
	RegistrationId *string
	Version        string
}

// TableName overrides the default tablename generated by GORM
func (ProtocolORM) TableName() string {
	return "protocols"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Protocol) ToORM(ctx context.Context) (ProtocolORM, error) {
	to := ProtocolORM{}
	var err error
	if prehook, ok := interface{}(m).(ProtocolWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Kind = int32(m.Kind)
	to.Version = m.Version
	to.Port = m.Port
	if posthook, ok := interface{}(m).(ProtocolWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProtocolORM) ToPB(ctx context.Context) (Protocol, error) {
	to := Protocol{}
	var err error
	if prehook, ok := interface{}(m).(ProtocolWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Kind = ProtocolKind(m.Kind)
	to.Version = m.Version
	to.Port = m.Port
	if posthook, ok := interface{}(m).(ProtocolWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Protocol the arg will be the target, the caller the one being converted from

// ProtocolBeforeToORM called before default ToORM code
type ProtocolWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProtocolORM) error
}

// ProtocolAfterToORM called after default ToORM code
type ProtocolWithAfterToORM interface {
	AfterToORM(context.Context, *ProtocolORM) error
}

// ProtocolBeforeToPB called before default ToPB code
type ProtocolWithBeforeToPB interface {
	BeforeToPB(context.Context, *Protocol) error
}

// ProtocolAfterToPB called after default ToPB code
type ProtocolWithAfterToPB interface {
	AfterToPB(context.Context, *Protocol) error
}

type ProducerORM struct {
	Exchange       string
	Id             string `gorm:"type:uuid;primary_key"`
	RegistrationId *string
}

// TableName overrides the default tablename generated by GORM
func (ProducerORM) TableName() string {
	return "producers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Producer) ToORM(ctx context.Context) (ProducerORM, error) {
	to := ProducerORM{}
	var err error
	if prehook, ok := interface{}(m).(ProducerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Exchange = m.Exchange
	if posthook, ok := interface{}(m).(ProducerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProducerORM) ToPB(ctx context.Context) (Producer, error) {
	to := Producer{}
	var err error
	if prehook, ok := interface{}(m).(ProducerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Exchange = m.Exchange
	if posthook, ok := interface{}(m).(ProducerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Producer the arg will be the target, the caller the one being converted from

// ProducerBeforeToORM called before default ToORM code
type ProducerWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProducerORM) error
}

// ProducerAfterToORM called after default ToORM code
type ProducerWithAfterToORM interface {
	AfterToORM(context.Context, *ProducerORM) error
}

// ProducerBeforeToPB called before default ToPB code
type ProducerWithBeforeToPB interface {
	BeforeToPB(context.Context, *Producer) error
}

// ProducerAfterToPB called after default ToPB code
type ProducerWithAfterToPB interface {
	AfterToPB(context.Context, *Producer) error
}

type ConsumerORM struct {
	Exchange       string
	Id             string `gorm:"type:uuid;primary_key"`
	Kind           int32
	Queue          string
	RegistrationId *string
	RoutingKey     string
}

// TableName overrides the default tablename generated by GORM
func (ConsumerORM) TableName() string {
	return "consumers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Consumer) ToORM(ctx context.Context) (ConsumerORM, error) {
	to := ConsumerORM{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Exchange = m.Exchange
	to.RoutingKey = m.RoutingKey
	to.Kind = int32(m.Kind)
	to.Queue = m.Queue
	if posthook, ok := interface{}(m).(ConsumerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ConsumerORM) ToPB(ctx context.Context) (Consumer, error) {
	to := Consumer{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Exchange = m.Exchange
	to.RoutingKey = m.RoutingKey
	to.Kind = ConsumerKind(m.Kind)
	to.Queue = m.Queue
	if posthook, ok := interface{}(m).(ConsumerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Consumer the arg will be the target, the caller the one being converted from

// ConsumerBeforeToORM called before default ToORM code
type ConsumerWithBeforeToORM interface {
	BeforeToORM(context.Context, *ConsumerORM) error
}

// ConsumerAfterToORM called after default ToORM code
type ConsumerWithAfterToORM interface {
	AfterToORM(context.Context, *ConsumerORM) error
}

// ConsumerBeforeToPB called before default ToPB code
type ConsumerWithBeforeToPB interface {
	BeforeToPB(context.Context, *Consumer) error
}

// ConsumerAfterToPB called after default ToPB code
type ConsumerWithAfterToPB interface {
	AfterToPB(context.Context, *Consumer) error
}

// DefaultCreateRegistration executes a basic gorm create call
func DefaultCreateRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RegistrationORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RegistrationORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RegistrationORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RegistrationORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RegistrationORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRegistration(ctx context.Context, in *Registration, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RegistrationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RegistrationORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRegistrationSet(ctx context.Context, in []*Registration, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RegistrationORM{})).(RegistrationORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RegistrationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RegistrationORM{})).(RegistrationORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RegistrationORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Registration, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Registration, *gorm.DB) error
}

// DefaultStrictUpdateRegistration clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRegistration")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RegistrationORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterConsumers := ConsumerORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterConsumers.RegistrationId = new(string)
	*filterConsumers.RegistrationId = ormObj.Id
	if err = db.Where(filterConsumers).Delete(ConsumerORM{}).Error; err != nil {
		return nil, err
	}
	filterProducers := ProducerORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterProducers.RegistrationId = new(string)
	*filterProducers.RegistrationId = ormObj.Id
	if err = db.Where(filterProducers).Delete(ProducerORM{}).Error; err != nil {
		return nil, err
	}
	filterProtocols := ProtocolORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterProtocols.RegistrationId = new(string)
	*filterProtocols.RegistrationId = ormObj.Id
	if err = db.Where(filterProtocols).Delete(ProtocolORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RegistrationORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRegistration executes a basic gorm update call with patch behavior
func DefaultPatchRegistration(ctx context.Context, in *Registration, updateMask *field_mask.FieldMask, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Registration
	var err error
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRegistration(ctx, &Registration{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRegistration(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRegistration(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RegistrationWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RegistrationWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRegistration executes a bulk gorm update call with patch behavior
func DefaultPatchSetRegistration(ctx context.Context, objects []*Registration, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Registration, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Registration, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRegistration(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRegistration patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRegistration(ctx context.Context, patchee *Registration, patcher *Registration, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Registration, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Address" {
			patchee.Address = patcher.Address
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Protocols" {
			patchee.Protocols = patcher.Protocols
			continue
		}
		if f == prefix+"Producers" {
			patchee.Producers = patcher.Producers
			continue
		}
		if f == prefix+"Consumers" {
			patchee.Consumers = patcher.Consumers
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRegistration executes a gorm list call
func DefaultListRegistration(ctx context.Context, db *gorm.DB) ([]*Registration, error) {
	in := Registration{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RegistrationORM{}, &Registration{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RegistrationORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Registration{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RegistrationORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RegistrationORM) error
}

// DefaultCreateProtocol executes a basic gorm create call
func DefaultCreateProtocol(ctx context.Context, in *Protocol, db *gorm.DB) (*Protocol, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ProtocolORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadProtocol(ctx context.Context, in *Protocol, db *gorm.DB) (*Protocol, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ProtocolORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ProtocolORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ProtocolORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ProtocolORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteProtocol(ctx context.Context, in *Protocol, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ProtocolORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ProtocolORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteProtocolSet(ctx context.Context, in []*Protocol, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ProtocolORM{})).(ProtocolORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ProtocolORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ProtocolORM{})).(ProtocolORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ProtocolORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Protocol, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Protocol, *gorm.DB) error
}

// DefaultStrictUpdateProtocol clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateProtocol(ctx context.Context, in *Protocol, db *gorm.DB) (*Protocol, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateProtocol")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ProtocolORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ProtocolORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchProtocol executes a basic gorm update call with patch behavior
func DefaultPatchProtocol(ctx context.Context, in *Protocol, updateMask *field_mask.FieldMask, db *gorm.DB) (*Protocol, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Protocol
	var err error
	if hook, ok := interface{}(&pbObj).(ProtocolWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadProtocol(ctx, &Protocol{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ProtocolWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskProtocol(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ProtocolWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateProtocol(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ProtocolWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ProtocolWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Protocol, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProtocolWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Protocol, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProtocolWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Protocol, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProtocolWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Protocol, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetProtocol executes a bulk gorm update call with patch behavior
func DefaultPatchSetProtocol(ctx context.Context, objects []*Protocol, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Protocol, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Protocol, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchProtocol(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskProtocol patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskProtocol(ctx context.Context, patchee *Protocol, patcher *Protocol, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Protocol, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Kind" {
			patchee.Kind = patcher.Kind
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"Port" {
			patchee.Port = patcher.Port
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListProtocol executes a gorm list call
func DefaultListProtocol(ctx context.Context, db *gorm.DB) ([]*Protocol, error) {
	in := Protocol{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ProtocolORM{}, &Protocol{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ProtocolORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProtocolORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Protocol{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ProtocolORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProtocolORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ProtocolORM) error
}

// DefaultCreateProducer executes a basic gorm create call
func DefaultCreateProducer(ctx context.Context, in *Producer, db *gorm.DB) (*Producer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ProducerORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadProducer(ctx context.Context, in *Producer, db *gorm.DB) (*Producer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ProducerORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ProducerORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ProducerORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ProducerORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteProducer(ctx context.Context, in *Producer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ProducerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ProducerORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteProducerSet(ctx context.Context, in []*Producer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ProducerORM{})).(ProducerORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ProducerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ProducerORM{})).(ProducerORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ProducerORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Producer, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Producer, *gorm.DB) error
}

// DefaultStrictUpdateProducer clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateProducer(ctx context.Context, in *Producer, db *gorm.DB) (*Producer, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateProducer")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ProducerORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ProducerORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchProducer executes a basic gorm update call with patch behavior
func DefaultPatchProducer(ctx context.Context, in *Producer, updateMask *field_mask.FieldMask, db *gorm.DB) (*Producer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Producer
	var err error
	if hook, ok := interface{}(&pbObj).(ProducerWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadProducer(ctx, &Producer{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ProducerWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskProducer(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ProducerWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateProducer(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ProducerWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ProducerWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Producer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProducerWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Producer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProducerWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Producer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProducerWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Producer, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetProducer executes a bulk gorm update call with patch behavior
func DefaultPatchSetProducer(ctx context.Context, objects []*Producer, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Producer, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Producer, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchProducer(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskProducer patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskProducer(ctx context.Context, patchee *Producer, patcher *Producer, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Producer, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Exchange" {
			patchee.Exchange = patcher.Exchange
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListProducer executes a gorm list call
func DefaultListProducer(ctx context.Context, db *gorm.DB) ([]*Producer, error) {
	in := Producer{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ProducerORM{}, &Producer{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ProducerORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProducerORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Producer{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ProducerORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProducerORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ProducerORM) error
}

// DefaultCreateConsumer executes a basic gorm create call
func DefaultCreateConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ConsumerORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ConsumerORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ConsumerORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ConsumerORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ConsumerORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteConsumer(ctx context.Context, in *Consumer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ConsumerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ConsumerORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteConsumerSet(ctx context.Context, in []*Consumer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ConsumerORM{})).(ConsumerORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ConsumerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ConsumerORM{})).(ConsumerORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ConsumerORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Consumer, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Consumer, *gorm.DB) error
}

// DefaultStrictUpdateConsumer clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateConsumer")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ConsumerORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ConsumerORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchConsumer executes a basic gorm update call with patch behavior
func DefaultPatchConsumer(ctx context.Context, in *Consumer, updateMask *field_mask.FieldMask, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Consumer
	var err error
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadConsumer(ctx, &Consumer{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskConsumer(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateConsumer(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ConsumerWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ConsumerWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetConsumer executes a bulk gorm update call with patch behavior
func DefaultPatchSetConsumer(ctx context.Context, objects []*Consumer, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Consumer, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Consumer, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchConsumer(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskConsumer patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskConsumer(ctx context.Context, patchee *Consumer, patcher *Consumer, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Consumer, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Exchange" {
			patchee.Exchange = patcher.Exchange
			continue
		}
		if f == prefix+"RoutingKey" {
			patchee.RoutingKey = patcher.RoutingKey
			continue
		}
		if f == prefix+"Kind" {
			patchee.Kind = patcher.Kind
			continue
		}
		if f == prefix+"Queue" {
			patchee.Queue = patcher.Queue
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListConsumer executes a gorm list call
func DefaultListConsumer(ctx context.Context, db *gorm.DB) ([]*Consumer, error) {
	in := Consumer{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ConsumerORM{}, &Consumer{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ConsumerORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Consumer{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ConsumerORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ConsumerORM) error
}
