
syntax = "proto3";

package core.eventstore.v1;

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/circadence-official/galactus/api/gen/go/core/eventstore/v1";

service EventStore {
  // Create a new event in the event store
  rpc Create(CreateEventRequest) returns (CreateEventResponse) {}
}

// Wrapper for the Event model, this is to keep inline with our linters
message CreateEventRequest {
  Event event = 1;
}

message CreateEventResponse {
  // event id
  string id = 1;
  bool is_published = 2;
}

// Event - Is the model of the event store
message Event {

  // METADATA

  // uuid generated in the grpc handler
  string event_id = 1 [(validate.rules).string.uuid = true];
  // the time the event create request was received
  google.protobuf.Timestamp received_date = 2;
  // the time the event was been published to it's respective topic/queue
  google.protobuf.Timestamp published_date = 3;
  // uuid generated by the caller(ex. commandhandler) and received by the client (ex. graphql)
  string transaction_id = 4;
  // whether or not to publish the event to the messagebus
  bool publish = 5;

  // EVENT DATA

  // map of all event types
  // NOTE: this is simply an integer to keep the eventstore from depending on changing types
  int64 event_type = 17;
  // the integer identifier (enum value) of the aggregate type this event belongs to
  // NOTE: this is simply an integer to keep the eventstore from depending on changing types
  int64 aggregate_type = 18;
  // the id of the aggregate that this event belongs to
  string aggregate_id = 19 [(validate.rules).string.uuid = true];
  // data representing the state of the system that this event encapsulates
  // it is saved as a json string so that the eventstore can be completey agnostic to the
  // the data structure of the system (and thus be a static service)
  // this data MUST be able to be unmarshalled into a Proto message type
  string event_data = 20;
}
