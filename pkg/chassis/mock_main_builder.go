// Code generated by mockery v2.9.4. DO NOT EDIT.

package chassis

import (
	azkeyvault "github.com/circadence-official/galactus/pkg/azkeyvault"
	broker "github.com/circadence-official/galactus/pkg/chassis/broker"

	gin "github.com/gin-gonic/gin"

	gorm "gorm.io/gorm"

	grpc "google.golang.org/grpc"

	logging "github.com/circadence-official/galactus/pkg/logging/v2"

	messagebus "github.com/circadence-official/galactus/pkg/chassis/messagebus"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	redis "github.com/go-redis/redis/v8"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"

	viper "github.com/spf13/viper"
)

// MockMainBuilder is an autogenerated mock type for the MainBuilder type
type MockMainBuilder struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMainBuilder) Close() {
	_m.Called()
}

// GetAzureKeyVaultClient provides a mock function with given fields:
func (_m *MockMainBuilder) GetAzureKeyVaultClient() azkeyvault.KeyVaultClient {
	ret := _m.Called()

	var r0 azkeyvault.KeyVaultClient
	if rf, ok := ret.Get(0).(func() azkeyvault.KeyVaultClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(azkeyvault.KeyVaultClient)
		}
	}

	return r0
}

// GetBroker provides a mock function with given fields:
func (_m *MockMainBuilder) GetBroker() messagebus.MessageBus {
	ret := _m.Called()

	var r0 messagebus.MessageBus
	if rf, ok := ret.Get(0).(func() messagebus.MessageBus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(messagebus.MessageBus)
		}
	}

	return r0
}

// GetBrokerDefinition provides a mock function with given fields: name
func (_m *MockMainBuilder) GetBrokerDefinition(name string) (*broker.BrokerDefinition, error) {
	ret := _m.Called(name)

	var r0 *broker.BrokerDefinition
	if rf, ok := ret.Get(0).(func(string) *broker.BrokerDefinition); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker.BrokerDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheClient provides a mock function with given fields:
func (_m *MockMainBuilder) GetCacheClient() *redis.Client {
	ret := _m.Called()

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *MockMainBuilder) GetConfig() *viper.Viper {
	ret := _m.Called()

	var r0 *viper.Viper
	if rf, ok := ret.Get(0).(func() *viper.Viper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viper.Viper)
		}
	}

	return r0
}

// GetGrpcGatewayMux provides a mock function with given fields:
func (_m *MockMainBuilder) GetGrpcGatewayMux() *runtime.ServeMux {
	ret := _m.Called()

	var r0 *runtime.ServeMux
	if rf, ok := ret.Get(0).(func() *runtime.ServeMux); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.ServeMux)
		}
	}

	return r0
}

// GetHttpRouter provides a mock function with given fields:
func (_m *MockMainBuilder) GetHttpRouter() *gin.Engine {
	ret := _m.Called()

	var r0 *gin.Engine
	if rf, ok := ret.Get(0).(func() *gin.Engine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}

	return r0
}

// GetLogger provides a mock function with given fields:
func (_m *MockMainBuilder) GetLogger() logging.Logger {
	ret := _m.Called()

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func() logging.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}

// GetMongoClient provides a mock function with given fields:
func (_m *MockMainBuilder) GetMongoClient() *mongo.Client {
	ret := _m.Called()

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// GetQueueDefinition provides a mock function with given fields: name
func (_m *MockMainBuilder) GetQueueDefinition(name string) *broker.BrokerDefinition {
	ret := _m.Called(name)

	var r0 *broker.BrokerDefinition
	if rf, ok := ret.Get(0).(func(string) *broker.BrokerDefinition); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker.BrokerDefinition)
		}
	}

	return r0
}

// GetRpcServer provides a mock function with given fields:
func (_m *MockMainBuilder) GetRpcServer() *grpc.Server {
	ret := _m.Called()

	var r0 *grpc.Server
	if rf, ok := ret.Get(0).(func() *grpc.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Server)
		}
	}

	return r0
}

// GetSqlClient provides a mock function with given fields:
func (_m *MockMainBuilder) GetSqlClient() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetTopicDefinition provides a mock function with given fields: name
func (_m *MockMainBuilder) GetTopicDefinition(name string) *broker.BrokerDefinition {
	ret := _m.Called(name)

	var r0 *broker.BrokerDefinition
	if rf, ok := ret.Get(0).(func(string) *broker.BrokerDefinition); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker.BrokerDefinition)
		}
	}

	return r0
}

// InitializeGORM provides a mock function with given fields: dbAddress
func (_m *MockMainBuilder) InitializeGORM(dbAddress string) (*gorm.DB, error) {
	ret := _m.Called(dbAddress)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(string) *gorm.DB); ok {
		r0 = rf(dbAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dbAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDevMode provides a mock function with given fields:
func (_m *MockMainBuilder) IsDevMode() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *MockMainBuilder) Run() {
	_m.Called()
}

// StartHttpServer provides a mock function with given fields:
func (_m *MockMainBuilder) StartHttpServer() {
	_m.Called()
}

// StartRpcServer provides a mock function with given fields:
func (_m *MockMainBuilder) StartRpcServer() {
	_m.Called()
}

// StopHttpServer provides a mock function with given fields:
func (_m *MockMainBuilder) StopHttpServer() {
	_m.Called()
}

// StopRpcServer provides a mock function with given fields:
func (_m *MockMainBuilder) StopRpcServer() {
	_m.Called()
}
