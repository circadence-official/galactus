// Code generated by mockery v2.9.4. DO NOT EDIT.

package token

import (
	autorest "github.com/Azure/go-autorest/autorest"
	adal "github.com/Azure/go-autorest/autorest/adal"

	azure "github.com/Azure/go-autorest/autorest/azure"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetKeyvaultToken provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockService) GetKeyvaultToken(_a0 string, _a1 string, _a2 string, _a3 string) (autorest.Authorizer, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 autorest.Authorizer
	if rf, ok := ret.Get(0).(func(string, string, string, string) autorest.Authorizer); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagementToken provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockService) GetManagementToken(_a0 string, _a1 string, _a2 string, _a3 string) (autorest.Authorizer, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 autorest.Authorizer
	if rf, ok := ret.Get(0).(func(string, string, string, string) autorest.Authorizer); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getServicePrincipalToken provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockService) getServicePrincipalToken(_a0 string, _a1 *azure.Environment, _a2 string, _a3 string, _a4 string) (*adal.ServicePrincipalToken, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *adal.ServicePrincipalToken
	if rf, ok := ret.Get(0).(func(string, *azure.Environment, string, string, string) *adal.ServicePrincipalToken); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adal.ServicePrincipalToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *azure.Environment, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// parseAzureEnvironment provides a mock function with given fields: _a0
func (_m *MockService) parseAzureEnvironment(_a0 string) (*azure.Environment, error) {
	ret := _m.Called(_a0)

	var r0 *azure.Environment
	if rf, ok := ret.Get(0).(func(string) *azure.Environment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
